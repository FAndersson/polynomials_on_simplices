# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import sys

sys.path.insert(0, os.path.abspath('../'))


# -- Project information -----------------------------------------------------

project = 'Polynomials on Simplices'
copyright = '2020, Fredrik Andersson'
author = 'Fredrik Andersson'

# The short X.Y version
version = ''
# The full version, including alpha/beta/rc tags
release = version


# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.doctest',
    'sphinx.ext.todo',
    'sphinx.ext.mathjax',
    'sphinx.ext.viewcode',
    'sphinx.ext.intersphinx',
    'sphinxcontrib.apidoc',
]
apidoc_module_dir = '../'
apidoc_output_dir = '.'
apidoc_separate_modules = True
apidoc_extra_args = ['-d 5']

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path .
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# Don't prepend object names with module name
add_module_names = False

# Use documentation from both class docstring and __init__ method
autoclass_content = 'both'

# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'sphinx_rtd_theme'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
# html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'PolynomialsOnSimplicesdoc'


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'PolynomialsOnSimplices.tex', 'Polynomials on Simplices Documentation',
     'Fredrik Andersson', 'manual'),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'polynomialsonsimplices', 'Polynomials on Simplices Documentation',
     [author], 1)
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'PolynomialsOnSimplices', 'Polynomials on Simplices Documentation',
     author, 'PolynomialsOnSimplices', 'One line description of project.',
     'Miscellaneous'),
]


# -- Extension configuration -------------------------------------------------

# -- Options for intersphinx extension ---------------------------------------

# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {
    'python': ('https://docs.python.org/3', None),
    'numpy': ('https://docs.scipy.org/doc/numpy/', None),
    'scipy': ('https://docs.scipy.org/doc/scipy/reference', None),
    'sympy': ('https://docs.sympy.org/latest/', None),
    'matplotlib': ('https://matplotlib.org/', None)
}

# -- Options for todo extension ----------------------------------------------

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True

nitpicky = True
nitpick_ignore = [
    ('py:class', 'Iterable'),
    ('py:class', 'Union'),
    ('py:class', 'Set'),
    ('py:class', 'List'),
    ('py:class', 'Dict'),
    ('py:class', 'Tuple'),
    ('py:class', 'Optional'),
    ('py:class', 'Iterator'),
    ('py:class', 'Instance of self.__class__'),
    ('py:class', 'Instance of PolynomialBase'),
    ('py:class', 'Scalar'),
    ('py:class', 'Vector'),
    ('py:class', 'Callable'),
    ('py:class', 'Callable f'),
    ('py:class', 'Callable m'),
    ('py:class', 'Callable p1'),
    ('py:class', 'Callable p2'),
    ('py:class', 'x'),
    ('py:class', 'y'),
    ('py:class', 'z'),
    ('py:class', 's'),
    ('py:class', 'node'),
    ('py:class', 'n + 1'),
    ('py:class', 'N + 1'),
    ('py:class', '3 by 3 matrix'),
    ('py:class', 'by 3 matrix'),
    ('py:class', 'by 3 matrices'),
    ('py:class', '2N by 3 matrix'),
    ('py:class', '8 by 3 matrix'),
    ('py:class', 'n by 2 matrix'),
    ('py:class', 'n by 3 matrix'),
    ('py:class', '2d vector'),
    ('py:class', '3d vector'),
    ('py:class', 'n-dimensional vector'),
    ('py:class', 'Pair of 3d vectors'),
    ('py:class', '4-tuple of 3d vectors'),
    ('py:class', 'Pair of'),
    ('py:class', 'Rotation matrix'),
    ('py:class', 'num hexahedrons by 8 matrix of integers'),
    ('py:class', '6 * num hexahedrons by 4 matrix of integers'),
    ('py:class', 'num triangles by 3 array of integers'),
    ('py:class', 'num simplices by'),
    ('py:class', 'array of integers'),
    ('py:class', 'num vertices by 2 array of floats'),
    ('py:class', 'num vertices by 3 array of floats'),
    ('py:class', 'num vertices by n array of floats'),
    ('py:class', 'Length 3 array of ints'),
    ('py:class', 'Number of triangles by 3 matrix'),
    ('py:class', 'Pair of ints'),
    ('py:class', 'Pair of n-dimensional vectors'),
    ('py:class', 'pair of n-dimensional vectors'),
    ('py:class', '{0'),
    ('py:class', '1}'),
    ('py:class', 'mpmath.matrix'),
]
